{"/home/travis/build/npmtest/node-npmtest-imgur/test.js":"/* istanbul instrument in package npmtest_imgur */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-imgur/lib.npmtest_imgur.js":"/* istanbul instrument in package npmtest_imgur */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_imgur = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_imgur = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-imgur/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-imgur && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_imgur */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_imgur\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_imgur.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_imgur.rollup.js'] =\n            local.assetsDict['/assets.npmtest_imgur.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_imgur.__dirname + '/lib.npmtest_imgur.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-imgur/node_modules/imgur/lib/imgur.js":"'use strict'\nvar imgur     = exports;\nvar request   = require('request');\nvar Q         = require('q');\nvar fs        = require('fs');\nvar urlParser = require('url');\nvar glob      = require('glob');\n\n// The following client ID is tied to the\n// registered 'node-imgur' app and is available\n// here for public, anonymous usage via this node\n// module only.\nvar IMGUR_CLIENT_ID    = process.env.IMGUR_CLIENT_ID || 'f0ea04148a54268';\nvar IMGUR_API_URL      = process.env.IMGUR_API_URL || 'https://api.imgur.com/3/';\nvar IMGUR_USERNAME     = null;\nvar IMGUR_PASSWORD     = null;\nvar IMGUR_ACCESS_TOKEN = null;\nvar IMGUR_MASHAPE_KEY  = process.env.IMGUR_MASHAPE_KEY;\n\n// An IIFE that returns the OS-specific home directory\n// as a location to optionally store the imgur client id\nvar DEFAULT_CLIENT_ID_PATH = (function() {\n    var envHome = (process.platform === 'win32') ? 'USERPROFILE' : 'HOME'\n    return process.env[envHome] + '/.imgur';\n}());\n\nimgur.VERSION = require('../package.json').version;\n\n\n/**\n * Send a request to imgur's public API\n *\n * @param   {string}  operation - operation to perform; 'info' or 'upload'\n * @param   {mixed}   payload - image data\n * @returns {promise}\n */\nimgur._imgurRequest = function (operation, payload, extraFormParams) {\n    var deferred = Q.defer();\n    var form     = null;\n    var options  = {\n        uri:      IMGUR_API_URL,\n        method:   null,\n        encoding: 'utf8',\n        json:     true\n    };\n\n    if (!operation || typeof operation !== 'string' || (!payload && operation !== 'credits')) {\n        deferred.reject(new Error('Invalid argument'));\n        return deferred.promise;\n    }\n\n    switch(operation) {\n        case 'upload':\n            options.method = 'POST';\n            options.uri += 'image';\n            break;\n        case 'credits':\n            options.method = 'GET';\n            options.uri += 'credits';\n            break;\n        case 'info':\n            options.method = 'GET';\n            options.uri += 'image/' + payload;\n            break;\n        case 'album':\n            options.method = 'GET';\n            options.uri += 'album/' + payload;\n            break;\n        case 'createAlbum':\n            options.method = 'POST';\n            options.uri += 'album';\n            break;\n        case 'delete':\n            options.method = 'DELETE';\n            options.uri += 'image/' + payload;\n            break;\n        default:\n            deferred.reject(new Error('Invalid operation'));\n            return deferred.promise;\n    }\n\n    imgur._getAuthorizationHeader()\n        .then(function (authorizationHeader) {\n            if(IMGUR_MASHAPE_KEY) {\n                options.headers = {\n                    Authorization: authorizationHeader,\n                    'X-Mashape-Key': IMGUR_MASHAPE_KEY\n                };\n            } else {\n                options.headers = {\n                    Authorization: authorizationHeader\n                };\n            }\n\n            var r = request(options, function (err, res, body) {\n                if (err) {\n                    deferred.reject(err);\n                } else if (body && !body.success) {\n                    deferred.reject({status: body.status, message: body.data ? body.data.error : 'No body data response'});\n                } else {\n                    deferred.resolve(body);\n                }\n            });\n\n            if (operation === 'upload') {\n                form = r.form();\n                form.append('image', payload);\n\n                if (typeof extraFormParams === 'object') {\n                    for (var param in extraFormParams) {\n                        form.append(param, extraFormParams[param]);\n                    }\n                }\n            }\n        })\n        .catch(function (err) {\n            deferred.reject(err);\n        });\n\n    return deferred.promise;\n}\n\n/**\n * Make a request, handling potential errors\n *\n * @param {object} options\n * @returns {promise}\n */\nimgur._request = function (options) {\n    var deferred = Q.defer();\n\n    request(options, function (err, res, body) {\n        if (err) {\n            deferred.reject(err);\n        } else {\n            deferred.resolve(res);\n        }\n    });\n\n    return deferred.promise;\n}\n\n/**\n * Get imgur access token using credentials\n *\n * @returns {promise}\n */\nimgur._getAuthorizationHeader = function () {\n    var deferred = Q.defer();\n\n    if (IMGUR_ACCESS_TOKEN) {\n        deferred.resolve('Bearer ' + IMGUR_ACCESS_TOKEN);\n    } else if (IMGUR_USERNAME && IMGUR_PASSWORD) {\n        var options = {\n            uri:      'https://api.imgur.com/oauth2/authorize',\n            method:   'GET',\n            encoding: 'utf8',\n            qs: {\n                client_id: IMGUR_CLIENT_ID,\n                response_type: 'token'\n            }\n        };\n        imgur._request(options).then(function (res) {\n            var authorize_token = res.headers['set-cookie'][0].match('(^|;)[\\s]*authorize_token=([^;]*)')[2];\n            options.method = 'POST';\n            options.json = true;\n            options.form = {\n                username: IMGUR_USERNAME,\n                password: IMGUR_PASSWORD,\n                allow: authorize_token\n            };\n            options.headers = {\n                Cookie: 'authorize_token=' + authorize_token\n            };\n            imgur._request(options).then(function (res) {\n                var location = res.headers.location;\n                var token = JSON.parse('{\"' + decodeURI(location.slice(location.indexOf('#') + 1)).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g,'\":\"') + '\"}');\n                IMGUR_ACCESS_TOKEN = token.access_token;\n                deferred.resolve('Bearer ' + IMGUR_ACCESS_TOKEN);\n            }).catch(function (err) {\n                deferred.reject(err);\n            });\n        }).catch(function (err) {\n            deferred.reject(err);\n        });\n    } else {\n        deferred.resolve('Client-ID ' + IMGUR_CLIENT_ID);\n    }\n\n    return deferred.promise;\n}\n\n/**\n * Set your credentials\n * @link https://api.imgur.com/#register\n * @param {string} username\n * @param {string} password\n * @param {string} clientId\n */\nimgur.setCredentials = function (username, password, clientId) {\n    if (clientId && typeof clientId === 'string') {\n        IMGUR_CLIENT_ID = clientId;\n    }\n    if (username && typeof username === 'string') {\n        IMGUR_USERNAME = username;\n    }\n    if (password && typeof password === 'string') {\n        IMGUR_PASSWORD = password;\n    }\n}\n\n\n/**\n * Attempt to load the client ID from disk\n * @param   {string}  path - path to file with client id\n * @returns {promise}\n */\nimgur.loadClientId = function (path) {\n    var deferred = Q.defer();\n    var clientId = null;\n\n    path = path || DEFAULT_CLIENT_ID_PATH;\n\n    fs.readFile(path, { encoding: 'utf8' }, function (err, data) {\n        if (err) {\n            return deferred.reject(err);\n        }\n\n        if (!data) {\n            deferred.reject(new Error('File is empty'));\n            return deferred.promise;\n        }\n\n        return deferred.resolve(data);\n    });\n\n    return deferred.promise;\n}\n\n\n/**\n * Attempt to save the client ID to disk\n * @param   {string} path - path to save the client id to\n * @returns {promise}\n */\nimgur.saveClientId = function (clientId, path) {\n    var deferred = Q.defer();\n\n    path = path || DEFAULT_CLIENT_ID_PATH;\n\n    fs.writeFile(path, clientId, function (err) {\n        if (err) {\n            return deferred.reject(err);\n        }\n\n        return deferred.resolve();\n    });\n\n    return deferred.promise;\n}\n\n\n/**\n * Attempt to remove a saved client ID from disk\n * NOTE: File remains but is emptied\n *\n * @param   {string} path - path to save the client id to\n * @returns {promise}\n */\nimgur.clearClientId = function (path) {\n    return imgur.saveClientId('', path);\n}\n\n\n/**\n * Set your client ID\n * @link https://api.imgur.com/#register\n * @param {string} clientId\n */\nimgur.setClientId = function (clientId) {\n    if (clientId && typeof clientId === 'string') {\n        IMGUR_CLIENT_ID = clientId;\n    }\n}\n\n\n/**\n * Get currently set client ID\n * @returns {string} client ID\n */\nimgur.getClientId = function () {\n    return IMGUR_CLIENT_ID;\n}\n\n/**\n * Set Imgur API URL\n * @link https://api.imgur.com/#register or https://imgur-apiv3.p.mashape.com\n * @param {string} URL - URL to make the API calls to imgur\n */\nimgur.setAPIUrl = function(URL) {\n    if(URL && typeof URL === 'string') {\n        IMGUR_API_URL = URL;\n    }\n}\n\n/**\n * Get Imgur API Url\n * @returns {string} API Url\n */\nimgur.getAPIUrl = function() {\n    return IMGUR_API_URL;\n}\n\n/**\n * Set Mashape Key\n * @link https://market.mashape.com/imgur/imgur-9\n * @param {string} mashapeKey\n */\nimgur.setMashapeKey = function(mashapeKey) {\n    if(mashapeKey && typeof mashapeKey === 'string') {\n        IMGUR_MASHAPE_KEY = mashapeKey;\n    }\n}\n/**\n * Get Mashape Key\n * @returns {string} Mashape Key\n */\nimgur.getMashapeKey = function() {\n    return IMGUR_MASHAPE_KEY;\n}\n\n/**\n * Delete image\n * @param {string} deletehash - deletehash of the image generated during upload\n * @returns {promise}\n */\nimgur.deleteImage = function (deletehash) {\n    var deferred = Q.defer();\n\n    if(!deletehash) {\n        deferred.reject('Missing deletehash');\n    }\n\n    imgur._imgurRequest('delete', deletehash)\n        .then(function (json) {\n            deferred.resolve(json);\n        })\n        .catch(function (err) {\n            deferred.reject(err);\n        });\n    return deferred.promise;\n}\n\n/**\n * Get image metadata\n * @param   {string}  id - unique image id\n * @returns {promise}\n */\nimgur.getInfo = function (id) {\n    var deferred = Q.defer();\n\n    if (!id) {\n        deferred.reject('Invalid image ID');\n        return deferred.promise;\n    }\n\n    imgur._imgurRequest('info', id)\n        .then(function (json) {\n            deferred.resolve(json);\n        })\n        .catch(function (err) {\n            deferred.reject(err);\n        });\n\n    return deferred.promise;\n}\n\n\n/**\n * Create an album\n * @returns {promise}\n */\nimgur.createAlbum = function () {\n    var deferred = Q.defer();\n\n    imgur._imgurRequest('createAlbum', 'dummy')\n        .then(function (json) {\n            deferred.resolve(json);\n        })\n        .catch(function (err) {\n            deferred.reject(err);\n        });\n\n    return deferred.promise;\n}\n\n\n/**\n * Get album metadata\n * @param   {string}  id - unique album id\n * @returns {promise}\n */\nimgur.getAlbumInfo = function (id) {\n    var deferred = Q.defer();\n\n    if (!id) {\n        deferred.reject(new Error('Invalid album ID'));\n        return deferred.promise;\n    }\n\n    imgur._imgurRequest('album', id)\n        .then(function (json) {\n            deferred.resolve(json);\n        })\n        .catch(function (err) {\n            deferred.reject(err);\n        });\n\n    return deferred.promise;\n}\n\n\n/**\n * Upload an image file\n * @param   {string}  file - path to a binary image file\n * @param   {string=} albumId - the album id to upload to\n * @returns {promise}\n */\nimgur.uploadFile = function (file, albumId) {\n    var deferred = Q.defer(),\n        extraFormParams = {};\n\n    if (typeof albumId === 'string' && albumId.length) {\n        extraFormParams.album = albumId;\n    }\n\n    glob(file, function (err, files) {\n        if (err) {\n            deferred.reject(err);\n            return deferred.promise;\n        } else if (!files.length) {\n            deferred.reject(new Error('Invalid file or glob'));\n            return deferred.promise;\n        }\n\n        files.forEach(function (f, index, arr) {\n            var readStream = fs.createReadStream(f);\n            readStream.on('error', deferred.reject);\n\n            imgur._imgurRequest('upload', readStream, extraFormParams)\n                .then(function (json) {\n                    deferred.resolve(json);\n                })\n                .catch(function (err) {\n                    deferred.reject(err);\n                });\n        });\n    });\n\n    return deferred.promise;\n}\n\n\n/**\n * Upload a url\n * @param   {string}  url - address to an image on the web\n * @param   {string=} albumId - the album id to upload to\n * @returns {promise}\n */\nimgur.uploadUrl = function (url, albumId) {\n    var deferred = Q.defer(),\n        extraFormParams = {};\n\n    if (typeof albumId === 'string' && albumId.length) {\n        extraFormParams.album = albumId;\n    }\n\n    if (!url || !urlParser.parse(url).protocol) {\n        deferred.reject(new Error('Invalid URL'));\n        return deferred.promise;\n    }\n\n    imgur._imgurRequest('upload', url, extraFormParams)\n        .then(function (json) {\n            deferred.resolve(json);\n        })\n        .catch(function (err) {\n            deferred.reject(err);\n        });\n\n    return deferred.promise;\n}\n\n\n/**\n * Upload a Base64-encoded string\n * @link http://en.wikipedia.org/wiki/Base64\n * @param   {string} base64 - a base-64 encoded string\n * @param   {string=} albumId - the album id to upload to\n * @returns {promise} - on resolve, returns the resulting image object from imgur\n */\nimgur.uploadBase64 = function (base64, albumId) {\n    var\n        deferred = Q.defer(),\n        extraFormParams = {};\n\n    if (typeof albumId === 'string' && albumId.length) {\n        extraFormParams.album = albumId;\n    }\n\n    if (typeof base64 !== 'string' || !base64 || !base64.length) {\n        deferred.reject(new Error('Invalid Base64 input'));\n        return deferred.promise;\n    }\n\n    imgur._imgurRequest('upload', base64, extraFormParams)\n        .then(function (image) {\n            deferred.resolve(image);\n        })\n        .catch(function (err) {\n            deferred.reject(err);\n        });\n\n    return deferred.promise;\n}\n\n/**\n * Upload an entire album of images\n * @param   {Array} images - array of image strings of desired type\n * @param   {string} uploadType - the type of the upload ('File', 'Url', 'Base64')\n * @param   {boolean=} failSafe - if true, it won't fail on invalid or empty image input and will return an object with empty album data and an empty image array\n * @returns {promise} - on resolve, returns an object with the album data and and an array of image data objects {data: {...}, images: [{...}, ...]}\n */\nimgur.uploadAlbum = function (images, uploadType, failSafe) {\n    var deferred = Q.defer();\n\n    if (!images || !images.length || !(typeof images === 'string' || images instanceof Array)) {\n        if (failSafe) {\n            deferred.resolve({data: {}, images: []});\n        } else {\n            deferred.reject(new Error('Invalid image input, only arrays supported'));\n        }\n        return deferred.promise;\n    }\n\n    imgur.createAlbum()\n        .then(function(album) {\n            imgur.uploadImages(images, uploadType, album.data.id)\n                .then(function (images) {\n                    deferred.resolve({data: album.data, images: images});\n                })\n                .catch(function (err) {\n                    return deferred.reject(err);\n                });\n        })\n        .catch(function (err) {\n            return deferred.reject(err);\n        });\n\n    return deferred.promise;\n}\n\n/**\n * Upload an entire album of images\n * @param {Array} images  - array of image strings of desired type\n * @param {string} uploadType - the type of the upload ('File', 'Url', 'Base64')\n * @param {string=} albumId - the album id to upload to\n * @returns {promise} - on resolve, returns an array of image data objects {album: {...}, images: [{...}, ...]}\n */\nimgur.uploadImages = function (images, uploadType, albumId) {\n    var deferred = Q.defer();\n    var upload = imgur['upload' + uploadType];\n\n    if (!images || !images.length || !(typeof images === 'string' || images instanceof Array)) {\n        deferred.reject(new Error('Invalid image input, only arrays supported'));\n        return deferred.promise;\n    }\n\n    var results = [];\n    var progress = 0;\n    var done = images.length;\n    for (var i = 0; i < done; i++) {\n        upload(images[i], albumId)\n            .then(function (image) {\n                results.push(image.data);\n                ++progress;\n                if (progress == done) {\n                    deferred.resolve(results);\n                }\n            })\n            .catch(function (err) {\n                deferred.reject(err);\n                return deferred.promise;\n            });\n    }\n\n    return deferred.promise;\n}\n\n\n/**\n * Get current credit limits\n * @returns {promise}\n */\nimgur.getCredits = function () {\n    var deferred = Q.defer();\n\n    imgur._imgurRequest('credits')\n        .then(function (json) {\n            deferred.resolve(json);\n        })\n        .catch(function (err) {\n            deferred.reject(err);\n        });\n\n    return deferred.promise;\n}\n","/home/travis/build/npmtest/node-npmtest-imgur/node_modules/imgur/cli.js":"#!/usr/bin/env node\n'use strict'\nvar imgur     = require('./lib/imgur');\nvar commander = require('commander');\nvar Q         = require('q');\nvar util      = require('util');\n\n// Used to collect args for specific options\nfunction collect (val, arr) {\n    arr.push(val);\n    return arr;\n}\n\ncommander\n    .version(imgur.VERSION)\n    .option('-i, --info [id]', 'Lookup images by ID', collect, [])\n    .option('-b, --base64 [string]', 'Upload a base64-encoded images', collect, [])\n    .option('-u, --url [url]', 'Upload URLs', collect, [])\n    .option('-f, --file [file ...]', 'Upload binary image files', collect, [])\n    .option('-c, --client-id [id]', 'Specify a client ID to use only for the current operation')\n    .option('-a, --album-id [id]', 'Specify an album ID to upload images to')\n    .option('--credits', 'Get information about remaining credits')\n    .option('--save [id]', 'Save client id to disk for future use')\n    .option('--clear', 'Remove previously saved client id')\n    .option('--show', 'Display saved client id')\n    .parse(process.argv);\n\n\n// @TODO: There's probably a more promisey/chainy way to make this more succinct\n\nimgur.loadClientId()\n    .then(imgur.setClientId)\n    .fin(function () {\n        if (commander.clientId) {\n            imgur.setClientId(commander.clientId);\n        }\n\n        if (commander.show) {\n\n            console.log(imgur.getClientId());\n\n        } else if (commander.clear) {\n\n            imgur.clearClientId()\n                .fail(function (err) {\n                    console.error('Unable to clear client id (%s)', err.message);\n                });\n\n        } else if (commander.save) {\n\n            imgur.saveClientId(commander.save)\n                .fail(function (err) {\n                    console.error('Unable to save client id (%s)', err.message);\n                });\n\n        } else if (commander.credits) {\n\n            imgur.getCredits()\n                .then(function (json) {\n                    console.log(json.data);\n                }, function (err) {\n                    console.error('Unable to get credit info (%s)', err.message);\n                });\n\n        } else {\n\n            if (commander.file.length || commander.args.length) {\n                var args = commander.file.concat(commander.args);\n                var albumId = commander.albumId ? commander.albumId : null;\n                if (!albumId && args.length > 1) {\n                    var aId, deleteHash;\n                    imgur.createAlbum()\n                        .then(function (json) {\n                            aId = json.data.id;\n                            deleteHash = json.data.deletehash;\n                            console.log('Album -> https://imgur.com/a/%s', aId);\n                            args.forEach(function(file, index, array) {\n                                imgur.uploadFile(file, deleteHash)\n                                    .then(function (json) {\n                                        var output = util.format('%s -> %s', file, json.data.link);\n                                        console.log(output);\n                                    }, function (err) {\n                                        console.error('%s (%s)', err.message, file);\n                                    });\n                            });\n                        }, function (err) {\n                            console.error('Unable to create album (%s)', err.message);\n                        });\n                } else {\n                    args.forEach(function(file, index, array) {\n                        imgur.uploadFile(file, albumId)\n                            .then(function (json) {\n                                var output;\n                                if (args.length > 1) {\n                                    output = util.format('%s -> %s', file, json.data.link);\n                                } else {\n                                    output = json.data.link;\n                                }\n                                console.log(output);\n                            }, function (err) {\n                                console.error('%s (%s)', err.message, file);\n                            });\n                    });\n                }\n            }\n\n            if (commander.info.length) {\n                commander.info.forEach(function (id, index, array) {\n                    imgur.getInfo(id)\n                        .then(function (json) {\n                            console.log(json.data);\n                        }, function (err) { console.log(err.message); });\n                });\n            }\n\n\n            if (commander.base64.length) {\n                commander.base64.forEach(function(str, index, array) {\n                    imgur.uploadBase64(str)\n                        .then(function (json) {\n                            var output;\n                            if (commander.base64.length > 1) {\n                                output = util.format('%s... -> %s', str.substr(0, 7), json.data.link);\n                            } else {\n                                output = json.data.link;\n                            }\n                            console.log(output);\n                        }, function (err) {\n                            var output = util.format('%s (%s...)', err.message, str.substr(0, 7));\n                            console.error(output);\n                        });\n                });\n            }\n\n\n            if (commander.url.length) {\n                commander.url.forEach(function(url, index, array) {\n                    imgur.uploadUrl(url)\n                        .then(function (json) {\n                            var output;\n                            if (commander.url.length > 1) {\n                                output = util.format('%s -> %s', url, json.data.link);\n                            } else {\n                                output = json.data.link;\n                            }\n                            console.log(output);\n                        }, function (err) {\n                            console.error('%s (%s)', err.message, url);\n                        });\n                });\n            }\n        }\n    });\n"}